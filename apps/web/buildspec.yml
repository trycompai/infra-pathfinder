version: 0.2

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - curl -fsSL https://bun.sh/install | bash

  build:
    commands:
      - echo "=== BUILD ENVIRONMENT DEBUG ==="
      - echo "DATABASE_URL exists:" $(test -n "$DATABASE_URL" && echo "YES" || echo "NO")
      - echo "DATABASE_URL length:" ${#DATABASE_URL}
      - echo "DATABASE_URL (masked):" $(echo "$DATABASE_URL" | sed 's/:[^@]*@/:***@/')
      - echo "NODE_ENV:" $NODE_ENV
      - cd apps/web

      - echo "=== INSTALLING DEPENDENCIES ==="
      - export PGSSLMODE=require
      - export NEXT_TELEMETRY_DISABLED=1
      - SKIP_ENV_VALIDATION=true /root/.bun/bin/bun install --frozen-lockfile

      - echo "=== GENERATING PRISMA CLIENT ==="
      - npx prisma generate

      - echo "=== TYPE CHECKING ==="
      - echo "Running TypeScript type checking..."
      - /root/.bun/bin/bun run type-check
      - echo "✅ Type checking passed"

      - echo "=== RUNNING DATABASE MIGRATIONS ==="
      - echo "Running migrations before build..."
      - NODE_TLS_REJECT_UNAUTHORIZED=0 /root/.bun/bin/bun run db:migrate:runtime
      - echo "✅ Database migrations completed"

      - echo "=== BUILDING NEXT.JS ON CODEBUILD HOST (WITH MIGRATED DATABASE) ==="
      - echo "Running Next.js build with database access for SSG..."
      - NODE_TLS_REJECT_UNAUTHORIZED=0 /root/.bun/bin/bun run build
      - echo "✅ Next.js build completed with database access"

      - echo "=== PREPARING STANDALONE BUILD FILES ==="
      - echo "Next.js standalone build requires manual copying of static files..."
      - cp -r public .next/standalone/ || echo "No public folder found"
      - cp -r .next/static .next/standalone/.next/ || echo "No static folder found"
      - echo "Copying Prisma client to standalone build..."
      - mkdir -p .next/standalone/src/generated
      - cp -r src/generated/client .next/standalone/src/generated/ || echo "Warning: Custom Prisma client not found"
      - echo "✅ Standalone files prepared"

      - echo "=== VERIFYING BUILD ARTIFACTS ==="
      - echo "Checking if required files exist..."
      - ls -la .next/standalone/ || echo "❌ .next/standalone/ not found"
      - ls -la .next/standalone/.next/static/ || echo "❌ .next/standalone/.next/static/ not found"
      - ls -la .next/standalone/public/ || echo "❌ .next/standalone/public/ not found"
      - ls -la .next/standalone/server.js || echo "❌ server.js not found"

      - echo "=== BUILDING DOCKER RUNTIME IMAGE WITH PRE-BUILT ARTIFACTS ==="
      - echo "Creating runtime-only Docker image with build artifacts..."
      - |
        cat > Dockerfile.runtime << 'EOF'
        # Use Node.js Alpine for smaller runtime image
        FROM node:18-alpine AS runtime

        WORKDIR /app

        ENV NODE_ENV=production
        ENV NEXT_TELEMETRY_DISABLED=1
        ENV PORT=3000
        ENV HOSTNAME="0.0.0.0"

        # Copy the complete standalone build from CodeBuild
        COPY .next/standalone ./

        # Create non-root user for security
        RUN addgroup -g 1001 -S nodejs && \
            adduser -S nextjs -u 1001 && \
            chown -R nextjs:nodejs /app

        USER nextjs

        EXPOSE 3000

        # Use node to run the standalone server.js
        CMD ["node", "server.js"]
        EOF
      - docker build -f Dockerfile.runtime -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo "Pushing images to ECR..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo "Updating ECS service to deploy new image..."
      - |
        if ! aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment; then
          echo "❌ Failed to update ECS service"
          exit 1
        fi
      - echo "Writing image definitions file..."
      - 'printf "[{\"name\":\"pathfinder-app\",\"imageUri\":\"%s\"}]" $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json'

artifacts:
  files:
    - imagedefinitions.json
  name: pathfinder-build
