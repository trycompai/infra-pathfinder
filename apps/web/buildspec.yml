version: 0.2

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - curl -fsSL https://bun.sh/install | bash

  build:
    commands:
      - echo "=== BUILD ENVIRONMENT DEBUG ==="
      - echo "DATABASE_URL exists:" $(test -n "$DATABASE_URL" && echo "YES" || echo "NO")
      - echo "DATABASE_URL length:" ${#DATABASE_URL}
      - echo "DATABASE_URL (masked):" $(echo "$DATABASE_URL" | sed 's/:[^@]*@/:***@/')
      - echo "NODE_ENV:" $NODE_ENV
      - cd apps/web
      - echo "=== BUILDING NEXT.JS ON CODEBUILD HOST (WITH VPC DATABASE ACCESS) ==="
      - SKIP_ENV_VALIDATION=true /root/.bun/bin/bun install --frozen-lockfile
      - echo "Running Next.js build with database access for SSG..."
      - /root/.bun/bin/bun run build
      - echo "âœ… Next.js build completed with database access"
      
      - echo "=== BUILDING DOCKER IMAGE WITH BUILD ARTIFACTS ==="
      - |
        cat > Dockerfile.runtime << 'EOF'
        FROM public.ecr.aws/lambda/nodejs:18-x86_64
        WORKDIR /app
        
        # Install unzip and Bun
        RUN yum update -y && yum install -y unzip && \
            curl -fsSL https://bun.sh/install | bash && \
            ln -s /root/.bun/bin/bun /usr/local/bin/bun
        
        ENV NODE_ENV=production
        ENV NEXT_TELEMETRY_DISABLED=1
        ENV PORT=3000
        ENV HOSTNAME="0.0.0.0"
        
        # Copy pre-built Next.js artifacts from CodeBuild host
        COPY .next/standalone ./
        COPY .next/static ./.next/static
        COPY public ./public
        
        EXPOSE 3000
        CMD ["bun", "server.js"]
        EOF
        
      - docker build -f Dockerfile.runtime -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo "Updating ECS service to deploy new image..."
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
      - echo "Writing image definitions file..."
      - 'printf "[{\"name\":\"pathfinder-app\",\"imageUri\":\"%s\"}]" $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json'

artifacts:
  files:
    - imagedefinitions.json
  name: pathfinder-build
