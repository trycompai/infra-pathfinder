version: 0.2

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws --version
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo "Repository URI is $REPOSITORY_URI"
      - echo "Image tag is $IMAGE_TAG"
      - echo "Installing Bun..."
      - curl -fsSL https://bun.sh/install | bash
      - echo "Verifying Bun installation..."
      - /root/.bun/bin/bun --version
      - echo "DATABASE_URL is configured for build-time access"

  build:
    commands:
      - echo "Build started on $(date)"
      - cd apps/web
      - echo "=== Environment Debug ==="
      - echo "NODE_ENV is $NODE_ENV"
      - echo "DATABASE_URL format check (masked):"
      - echo "$DATABASE_URL" | sed 's/:[^:]*@/:***@/' | sed 's/\/\/[^@]*@/\/\/***@/'
      - echo "=== End Environment Debug ==="
      - echo "PHASE 1 - Installing dependencies"
      - /root/.bun/bin/bun install --frozen-lockfile
      - echo "PHASE 2 - Building migration image"
      - docker build -f Dockerfile.migration -t $IMAGE_REPO_NAME:migration-$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:migration-$IMAGE_TAG $REPOSITORY_URI:migration-$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:migration-$IMAGE_TAG $REPOSITORY_URI:migration-latest
      - docker push $REPOSITORY_URI:migration-$IMAGE_TAG
      - docker push $REPOSITORY_URI:migration-latest
      - echo "PHASE 3 - Building main app image"
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo "Build completed on $(date)"
      - echo "Pushing the Docker images..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo "Updating ECS service to deploy new image..."
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
      - echo "Writing image definitions file..."
      - 'printf "[{\"name\":\"pathfinder-app\",\"imageUri\":\"%s\"}]" $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json'

artifacts:
  files:
    - imagedefinitions.json
  name: pathfinder-build
